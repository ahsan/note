#! /bin/bash

[[ -n $DEBUG ]] && set -x

set -eou pipefail

readonly SCRIPT_DIR="$(dirname $0)"
readonly NOTES_DIR=${NOTES_DIR:-"$(dirname $0)/.notes"}

main() {

  # Initialize notes directory if it doesn't already exist
  if [[ ! -d "$NOTES_DIR" ]]; then
    init_notes
  fi

  if [ "$#" -lt 1 ]; then
    usage
    exit
  elif [ "$#" -lt 2 ]; then
    if [ "$1" = "find" ] || [ "$1" = "list" ]; then
      find_note
    fi
  else
    if [ "$1" = "add" ]; then
      add_note $2
    elif [ "$1" = "edit" ]; then
      edit_note $2
    fi
  fi
}

init_notes() {
  mkdir -p "$NOTES_DIR"
}

add_note() {
  echo "Not implemented"
  exit
  local book_name="$1"
  local book_full_path="$NOTES_DIR/$book_name"
  local note_id=$(get_note_id)
  local note_name="$(whoami)-$note_id"
  local note_full_path="$book_full_path/$note_id"

  # Initialize book directory if it doesn't exist already
  if [[ ! -d "$book_full_path" ]]; then
    mkdir -p "$book_full_path"
  fi

  increment_next_id && touch "$note_full_path"
  vi "$note_full_path"
}

find_note() {
  if ! command -v fzf &> /dev/null
  then
      echo "fzf not found. Please install it for interactive note search."
      exit
  fi
  local file_path=$(find $NOTES_DIR/* -type f | fzf -e --preview 'cat {}' --preview-window=right:60%:rounded)
  cat "$file_path"
}

edit_note() {
  echo "Not implemented"
  exit
  local note_id="$1"
  local file_path=$(find "$NOTES_DIR" -name "$note_id" | awk 'NR==1{print $1}')
  vim "$file_path"
}

usage() {
  local self="note"

  cat <<EOF
Usage:
$self                 print this help menu
$self  add <book>     add a note in <book>
$self edit <note_id>  edit a note
$self find            find a note interactively
EOF
}

main "$@"
