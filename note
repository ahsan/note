#! /bin/bash

[[ -n $DEBUG ]] && set -x

set -eou pipefail

readonly SCRIPT_DIR="$(dirname $0)"
readonly NOTES_DIR=${NOTES_DIR:-"$(dirname $0)/.notes"}
readonly NOTE_NAME=note

main() {

  # Initialize notes directory if it doesn't already exist
  if [[ ! -d "$NOTES_DIR" ]]; then
    init_notes
  fi

  if [ "$#" -lt 1 ]; then
    usage
    exit
  else
    if [ "$1" = "find" ] || [ "$1" = "list" ]; then
        find_note
    elif [ "$1" = "add" ]; then
      add_note
    elif [ "$1" = "edit" ]; then
      edit_note
    fi
  fi
}

init_notes() {
  mkdir -p "$NOTES_DIR"
}

temp_file() {
  echo $(mktemp)
}

tags_string_to_dir() {
  local tags_sorted=$(echo $1 | tr "," "\n" | sort)
  local note_path=$NOTES_DIR/$(echo $tags_sorted | tr " " "/")/
  echo $note_path
}

add_note() {
  local output_temp_file=$(temp_file)
  vim $output_temp_file
  read -p "Enter comma separated tags for this note: " tags
  local note_dir=$(tags_string_to_dir $tags)
  local note_path=$note_dir/$NOTE_NAME
  mkdir -p $note_dir
  mv $output_temp_file $note_path
}

find_note() {
  if ! command -v fzf &> /dev/null
  then
      echo "fzf not found. Please install it for interactive note search."
      exit
  fi
  local file_path=$(find $NOTES_DIR/* -type f | fzf -e --preview 'cat {}' --preview-window=right:60%:rounded)
  cat "$file_path"
}

edit_note() {
  echo "Not implemented"
  exit
  local note_id="$1"
  local file_path=$(find "$NOTES_DIR" -name "$note_id" | awk 'NR==1{print $1}')
  vim "$file_path"
}

usage() {
  local self="note"

  cat <<EOF
Usage:
$self          print this help menu
$self   add    add a note
$self  edit    find and edit a note
$self  find    find a note interactively
EOF
}

main "$@"
